@model vhrm.FrameWork.Entity.EmployeeMaster
@{
    Layout = "~/Views/Shared/vhrmLayout.cshtml";
}
<link rel="stylesheet" href="~/assets/css/custom.css" />
<div style="width: 100%;margin-top:5px">
    <div class="clearfix"></div>
    <div>
        <input type="hidden" id="hdFunctCode" value="" />
    </div>
    <div id="GeoOrganizationListPartial" class="vhrm_employee">
        @using (Ajax.BeginForm("SaveEmployee", "Staff", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "boxbodyNew" }, new { id = "frmEmployee", @class = "form-horizontal", style = "margin-right:10px;" }))       
        {
            @Html.AntiForgeryToken()
        <div class="box-body">

            <div class="emp-search-block">
                <div class="emp-search-title">
                    <label class=" ">EMPID</label>
                    <input type="hidden" id="hdMode" value="@ViewBag.isMode" />
                </div>

                <div class="emp-search-formsearch">
                    <input id="empIdSearch" ondblclick="openSearchEmployee()" name="empIdSearch" type="text" value="" class="">
                    <button type="button" class="btn btn-default btn-sm btnOpacity" title="FIND" id="findEmployee"><i class="fa fa-search" aria-hidden="true"></i></button>
                </div>
                <div id="window"></div>
                <div class="emp-search-button">
                    @*<button type="button" id="newEmployee" class="btn btn-default btn-sm btnOpacity pull-right" title="New"><i class="fa fa-plus"></i></button>
                    <button type="button" id="btnDeleteEmployee" class="btn btn-default btn-sm btnOpacity pull-right" title="Delete employee"><i class="fa fa-times" aria-hidden="true"></i></button>*@
                    <button type="button" id="btnEdit" class="btn btn-default btn-sm btnOpacity pull-right" title="Edit"><i class="fa fa-edit"></i></button>
                    <button type="button" id="btnSave" class="btn btn-default btn-sm btnOpacity pull-right" title="Save"><i class="fa fa-save"></i></button>
                    <button type="button" id="btnCancel" class="btn btn-default btn-sm btnOpacity pull-right" title="Cancel"><i class="fa fa-ban"></i></button>
                </div>
            </div>
            <div class="alert alert-success" style="display:none;" role="alert" id="messageInfor"></div>
            <div id="StaffPartial" class="region">
                @{
                    Html.RenderPartial("New", Model);
                }
            </div>

            @(Html.Kendo().Dialog()
                                    .Name("formEmployeeDialog")
                                    .Visible(false)
                                    .Title("Search Employees")
                                    .HtmlAttributes(new { style = "display: flex; left: 90px; top: 70px; z - index: 10004;" })
                                    .Content(
                                        Html.Kendo().Grid<vhrm.FrameWork.Entity.eEmpBasicInfo>()
                                            .Name("gridForm")
                                            .AutoBind(false)
                                            .Columns(columns =>
                                            {
                                                columns.Bound(c => c.EMPID).Width(120).Title("EMPID");
                                                columns.Bound(c => c.EMPNAME).Width(200).Title("EMPNAME");
                                            })
                                            .Selectable(selectable => selectable
                                                .Mode(GridSelectionMode.Single))
                                            .Filterable(ft =>
                                            {
                                                ft.Extra(false);
                                                ft.Mode(GridFilterMode.Row);
                                                ft.Operators(ops => ops.ForString(str => str.Clear().Contains("Contains")));
                                            })
                                            .Sortable()
                                            .Scrollable()
                                            .Pageable(pg =>
                                            {
                                                pg.PageSizes(false);
                                                pg.Refresh(false);
                                                pg.ButtonCount(5);
                                            })
                                            .DataSource(dts =>
                                            {
                                                dts.Ajax()
                                                    .Read(read => read.Action("getEmpBasicInfo", "Employee"))
                                                    .PageSize(50);
                                            })
                                            .ToHtmlString()
                                    )
                                    .Width(500)
                            //.Height(520)
                            .Modal(true)
                            .Closable(true)
                            .Actions(actions =>
                            {
                                actions.Add().Text("Cancel");
                                actions.Add().Text("OК").Primary(true).Action("acceptSearchEmployee");
                            })
                            .Events(ev => ev.Open("openEmployeeDialogForm"))
            )

            @*FORM GEO SUPERVISOR*@
            @(Html.Kendo().Dialog()
                                    .Name("formGeoDialog")
                                    .Visible(false)
                                    .Title("Search Employees")
                                    .HtmlAttributes(new { style = "display: flex; left: 90px; top: 200px; z - index: 10004;" })
                                    .Content(
                                        Html.Kendo().Grid<vhrm.FrameWork.Entity.eEmpBasicInfo>()
                                            .Name("gridGeoForm")
                                            .AutoBind(false)
                                            .Columns(columns =>
                                            {
                                        //columns.Bound(c => c.SYS_EMPID).Width(120).Title("sys_empid");
                                        columns.Bound(c => c.EMPID).Width(120).Title("EMPID");
                                                columns.Bound(c => c.EMPNAME).Width(200).Title("EMPNAME");
                                                columns.Bound(c => c.DEPTCODE).Width(120).Title("DEPTCODE");
                                            })
                                            .Selectable(selectable => selectable
                                                .Mode(GridSelectionMode.Single))
                                            .Filterable(ft =>
                                            {
                                                ft.Extra(false);
                                                ft.Mode(GridFilterMode.Row);
                                                ft.Operators(ops => ops.ForString(str => str.Clear().Contains("Contains")));
                                            })
                                            .Sortable()
                                            .Scrollable()
                                            .Pageable(pg =>
                                            {
                                                pg.PageSizes(false);
                                                pg.Refresh(false);
                                                pg.ButtonCount(5);
                                            })
                                            .DataSource(dts =>
                                            {
                                                dts.Ajax()
                                                    .Read(read => read.Action("getUserInGeoReportByDeptCode", "Staff"))
                                                    .PageSize(50);
                                            })
                                            .ToHtmlString()
                                    )
                                    .Width(500)
                            //.Height(520)
                            .Modal(true)
                            .Closable(true)
                            .Actions(actions =>
                            {
                                actions.Add().Text("Cancel");
                                actions.Add().Text("OК").Primary(true).Action("acceptSearchSupervisor");
                            })
                            .Events(ev => ev.Open("openGeoDialogForm"))
            )
            @*FORM FUNCTION*@

            @(Html.Kendo().Dialog()
                                .Name("formFunctionDialog")
                                .Visible(false)
                                .Title("Search Employees")
                                .HtmlAttributes(new { style = "display: flex; left: 90px; top: 200px; z - index: 10004;" })
                                .Content(
                                    Html.Kendo().Grid<vhrm.FrameWork.Entity.eEmpBasicInfo>()
                                        .Name("gridFunctionForm")
                                        .AutoBind(false)
                                        .Columns(columns =>
                                        {
                                    //columns.Bound(c => c.SYS_EMPID).Width(120).Title("sys_empid");
                                    columns.Bound(c => c.EMPID).Width(120).Title("EMPID");
                                            columns.Bound(c => c.EMPNAME).Width(200).Title("EMPNAME");
                                            columns.Bound(c => c.DEPTCODE).Width(120).Title("FUNCDEPT");
                                        })
                                        .Selectable(selectable => selectable
                                            .Mode(GridSelectionMode.Single))
                                        .Filterable(ft =>
                                        {
                                            ft.Extra(false);
                                            ft.Mode(GridFilterMode.Row);
                                            ft.Operators(ops => ops.ForString(str => str.Clear().Contains("Contains")));
                                        })
                                        .Sortable()
                                        .Scrollable()
                                        .Pageable(pg =>
                                        {
                                            pg.PageSizes(false);
                                            pg.Refresh(false);
                                            pg.ButtonCount(5);
                                        })
                                        .DataSource(dts =>
                                        {
                                            dts.Ajax()
                                                .Read(read => read.Action("getUserInFunctReportByDeptCode", "Staff"))
                                                .PageSize(50);
                                        })
                                        .ToHtmlString()
                                )
                                .Width(500)
                            //.Height(520)
                            .Modal(true)
                            .Closable(true)
                            .Actions(actions =>
                            {
                                actions.Add().Text("Cancel");
                                actions.Add().Text("OК").Primary(true).Action("acceptSearchFunctionor");
                            })
                            .Events(ev => ev.Open("openFunctionDialogForm"))
            )
        </div>
        }
    </div>

    <div id="GeoOrganizationInforPartial" class="GeoOrganizationInforPartial" style="">
        <div class="demo-section k-content">
            @(Html.Kendo().TabStrip()
                                                        .Name("tabstrip")
                                                            .Events(e => e
                                                                    //.Select("tabstrip_select")
                                                                    .Activate("onTabStripActivate")
                                                            )
                                                        .Animation(animation =>
                                                        {
                                                            animation.Enable(ViewBag.animation == "expand:vertical" || true);

                                                            animation.Open(config =>
                                                            {
                                                                if (ViewBag.animation != "toggle")
                                                                {
                                                                    config.Expand(ExpandDirection.Vertical);
                                                                }

                                                                if (ViewBag.opacity == true)
                                                                {
                                                                    config.Fade(FadeDirection.In);
                                                                }

                                                                config.Duration(AnimationDuration.Fast);
                                                            });
                                                        }
                                                        )
                                                        .SelectedIndex(0)
                                                        .Items(tabstrip =>
                                                        {
                                                            tabstrip.Add().Text("Geo. Direct Report").
                                                                Content
                                                                (
                                                                        @Html.Partial("EmployeeGeoDirectReport").ToHtmlString()
                                                                );
                                                            tabstrip.Add().Text("Func Direct Report").
                                                               Content
                                                               (
                                                                       @Html.Partial("EmployeeFunctionDirectReport").ToHtmlString()
                                                               );
                                                        })
            )

        </div>
    </div>
</div>
<style>
    #tabstrip {
    }

    .k-tabstrip .k-content {
        min-height: 500px;
    }
</style>
<script>
document.addEventListener("DOMContentLoaded", function (event) {
       console.log(window.name);
    });
//#region GLOBAL AVARIABLE
var treeGeoDirectReport;
var treeFunctionDirectReport;
var treeemployeeOfOrg;
var geoOrganization;
var gridFunctReportEmployees;
var functReportCode;
var isSaveStatus;
var tabStrip;
var node;
var geouser;
var functuser;
var windowWidget;
let gridForm = null;
let gridGeoForm = null;
let gridFunctionForm = null;
var counter = 1;
var curPage = 1;
//#endregion GLOBAL AVARIABLE

//#region SEARCH EMPLOYEE
function acceptSearchEmployee(e) {
    let selectedRow = gridForm.select()[0];
    let selectedDataItem = gridForm.dataItem(selectedRow);
    $("#empIdSearch").val(selectedDataItem.EMPID);
}
function openEmployeeDialogForm() {
    gridForm.dataSource.read();
}
function openSearchEmployee() {
    $("#formEmployeeDialog").data("kendoDialog").open();
}
//#endregion SEARCH EMPLOYEE

//#region SEARCH SUPERVISOR
function acceptSearchSupervisor(e) {
    let selectedRow = gridGeoForm.select()[0];
    let selectedDataItem = gridGeoForm.dataItem(selectedRow);
    $("#GEOEMPIDREPORT").val(selectedDataItem.EMPID);
    $('#DISPLAYGEODIRECTREPORT').val(selectedDataItem.EMPNAME);
    $('#GEODIRECTREPORT').val(selectedDataItem.SYS_EMPID);  
    //$("#GEOGRAPHICALORG").val(selectedDataItem.DEPTCODE);
    //HIEN THI CAY VA ACTIVE SELECTED NODE
    //treeGeoReport.dataSource.filter({});
    //treeGeoReport.value(selectedDataItem.DEPTCODE);
}
    function openGeoDialogForm() {
        gridGeoForm.dataSource.read({ deptcode: $("#GEOGRAPHICALORG").val(), empid: $("#GEOEMPIDREPORT").val()});
}
function openGeoSearchEmployee() {
    $("#formGeoDialog").data("kendoDialog").open();
}
//#endregion SEARCH SUPERVISOR

//#region SEARCH FUNCTIONER
function acceptSearchFunctionor(e) {
    let selectedRow = gridFunctionForm.select()[0];
    let selectedDataItem = gridFunctionForm.dataItem(selectedRow);
    $("#FUNEMPIDREPORT").val(selectedDataItem.EMPID);
    $('#DISPLAYFUNCDIRECTREPORT').val(selectedDataItem.EMPNAME);
    $("#FUNCDIRECTREPORT").val(selectedDataItem.SYS_EMPID);
    //$("#FUNCTIONALORG").val(selectedDataItem.DEPTCODE);
    //HIEN THI CAY VA ACTIVE SELECTED NODE
    //treeFunctionReport.dataSource.filter({});
    //treeFunctionReport.value(selectedDataItem.DEPTCODE);
}
function openFunctionDialogForm() {
    gridFunctionForm.dataSource.read({ funccode: $("#FUNCTIONALORG").val(), empid: $("#FUNEMPIDREPORT").val() });
}
function openFunctionSearchEmployee() {
    $("#formFunctionDialog").data("kendoDialog").open();
}
//#endregion SEARCH FUNCTIONER

function onDataGridBoundGridEmployees(e) {
    $("[name='SYS_EMPID']").change(function (e) {
        var row = $(e.target).closest("tr");
        var dataItem = gridFunctReportEmployees.dataItem(row);
        gridFunctReportEmployees.select(row);
        $("#DISPLAYFUNCDIRECTREPORT").val(dataItem["EMPNAME"])
        $("#FUNCDIRECTREPORT").val(dataItem["SYS_EMPID"]);
        $("#FUNEMPIDREPORT").val(dataItem["EMPID"]);
    });
}
function onSelectItemGridEmployees(evt, args) {

}
function onDataBindingGridEmployees(e) {

}
function onPagingGridEmployees(e) {
    curPage = e.page;
    console.log("current page: " + curPage);
}
function renderNumber(data) {
    let pageSize = 0;
    pageSize = $("#gridFunctReportEmployees").data("kendoGrid").dataSource.pageSize();
    let curIndex = pageSize * (curPage - 1) + counter;
    counter = counter + 1;
    return curIndex;
}
function onChangeGeoDirectReport(e) {
}
function onSelectGeoDirectReport(e) {
}
function onChangeFuncDirectReport(e) {
}
function onSelectFuncDirectReport(e) {
    var dataItem = this.dataItem(e.node);
    if (dataItem != null) {
        var id = dataItem.id;
    }
}
function onBoundtreeGeoReport(e, args) {
}
function onSelectdtreeGeoReport(e) {
    var item = this.dataItem(e.node);
    $("#GEOGRAPHICALORG").val(item.DEPTCODE);
    $("#DISPLAYGEODIRECTREPORT").val("");
}
function onSelectdtreeFunctReport(e) {

    var dataItem = this.dataItem(e.node);
    $("#FUNCTIONALORG").val(dataItem.FUNCCODE);
    console.log("FUNCTIONALORG =" + dataItem.FUNCCODE);
    var displayTree = [];
    displayTree.push(dataItem.FUNCNAME);
    while (dataItem.parentNode()) {
        dataItem = dataItem.parentNode();
        displayTree.push(dataItem.FUNCNAME);
    }
    $("#DISPLAYFUNCTIONALORG").val(displayTree.join(" > "));
    $("#DISPLAYFUNCDIRECTREPORT").val("");
}
function onSelectdtreeFunctionReport(e) {
    var dataItem = this.dataItem(e.node);
    if (dataItem != null) {
    }
}
function onChangedtreeFunctionReport(e) {
    var dataItem = this.dataItem(e.node);
}
function DisplayTreeInTextBox(dataItem, type) {
    var displayTree = [];
    if (type == "org") {
        displayTree.push(dataItem.text);
        while (dataItem.parentNode()) {
            dataItem = dataItem.parentNode();
            displayTree.push(dataItem.text);
        }
    }
    else if (type == "fun") {
        displayTree.push(dataItem.text);
        while (dataItem.parentNode()) {
            dataItem = dataItem.parentNode();
            displayTree.push(dataItem.text);
        }
    }
    displayTree.reverse();
    return displayTree;
}
function onSelectdtreeemployeeOfOrg(e) {
    var dataItem = this.dataItem(e.node);
    currentNode = dataItem.DEPTCODE;
    alert(dataItem.DEPTCODE);
    $("#DEPTCODE").val(dataItem.DEPTCODE);
    var displayTree = [];
    displayTree.push(dataItem.DEPTNAME);
    while (dataItem.parentNode()) {
        dataItem = dataItem.parentNode();
        displayTree.push(dataItem.DEPTNAME);
    }
    displayTree.reverse();
    $("#DISPLAYDEPTCODE").val(displayTree.join(" > "));
    $("#DEPTCODE").val(dataItem.DEPTCODE);
    $("span[data-valmsg-for=DEPTCODE]").text("");
}
function onSelectdDeptGeo(e) {
    var dataItem = this.dataItem(e.node);
    $("#GEOGRAPHICALORG").val(dataItem.DEPTCODE);
    console.log(dataItem.DEPTCODE);
    var displayTree = [];
    displayTree.push(dataItem.DEPTNAME);
    while (dataItem.parentNode()) {
        dataItem = dataItem.parentNode();
        displayTree.push(dataItem.DEPTNAME);
    }
    displayTree.reverse();

    $("#DISPLAYGEOGRAPHICALORG").val(displayTree.join(" > "));

    $("#DISPLAYGEODIRECTREPORT").val("");
}
function onChangedtreeemployeeOfOrg(e) {

}
function clearForAddNew(value) {

    $("#DISPLAYDEPTCODE").val(value);
    $("#EMPID").val(value);
    $("#SYS_EMPID").val(value);
    $("#DISPLAYGEOGRAPHICALORG").val(value);
    $("#DISPLAYGEODIRECTREPORT").val(value);
    $("#DISPLAYFUNCTIONALORG").val(value);
    $("#DISPLAYFUNCDIRECTREPORT").val(value);

    $("#hfEMPID").val(value);
    $("#DEPTCODE").val(value);
    $("#GEOGRAPHICALORG").val(value);
    $("#GEODIRECTREPORT").val(value);
    $("#GEOEMPIDREPORT").val(value);
    $("#FUNCTIONALORG").val(value);
    $("#FUNCDIRECTREPORT").val(value);
    $("#FUNEMPIDREPORT").val(value);
    $("span[data-valmsg-for=EMPNAME]").text(value);
    $("span[data-valmsg-for=DEPTCODE]").text(value);
    $("span[data-valmsg-for=IDENTITYCARD]").text(value);
}
function onDataBoundFuncDirectReport(e) {
    this.expand(".k-item");
}
function onDataBoundParentsOrganization(e) {
}
function onDataBoundGeoDirectReport(e) {
    this.expand(".k-item");
    var dataItem = this.dataItem(e.node);
    if (dataItem != null) {       
        
        if ($("#GEOGRAPHICALORG").val() == dataItem.Key)
        {           
            var childNodes = dataItem.children.view();           
            for (var j = 0; j < childNodes.length; j++)
            {
                if (childNodes[j].Key == $("#GEODIRECTREPORT").val())
                {    
                    var selectItem = treeGeoDirectReport.findByUid(childNodes[j].uid);
                    treeGeoDirectReport.select(selectItem);
                    break;
                }
            }
        }
    }
}
function onDataBoundFunctionDirectReport(e) {
    this.expand(".k-item");
    var dataItem = this.dataItem(e.node);
    if (dataItem != null) {
        if ($("#FUNCTIONALORG").val() == dataItem.Key) {
            var childNodes = dataItem.children.view();
            for (var j = 0; j < childNodes.length; j++) {
                if (childNodes[j].Key == $("#FUNCDIRECTREPORT").val()) {
                    var selectItem = treeFunctionDirectReport.findByUid(childNodes[j].uid);
                    treeFunctionDirectReport.select(selectItem);
                    break;
                }
            }
        }
    }
}
function onTabStripActivate(e) {
}
function Visable(isNew, isDelete, isSave, isCancel, isEdit) {
    if (isNew) {
        $('#newEmployee').removeAttr('disabled');
        $("#newEmployee").removeClass("btn btn -default btn - sm btnDisOpacity pull - right").addClass("btn btn -default btn - sm btnOpacity pull - right");
    }
    else {
        $("#newEmployee").prop('disabled', 'disabled');
        $("#newEmployee").removeClass("btn btn -default btn - sm btnOpacity pull - right").addClass("btn btn -default btn - sm btnDisOpacity pull - right");
    }
    if (isDelete)
        $('#btnDeleteEmployee').removeAttr('disabled');
    else
        $("#btnDeleteEmployee").prop('disabled', 'disabled');
    if (isSave) {
        $('#btnSave').removeAttr('disabled');
        $("#btnSave").removeClass("btn btn -default btn - sm btnDisOpacity pull - right").addClass("btn btn -default btn - sm btnOpacity pull - right");
    }
    else {
        $("#btnSave").prop('disabled', 'disabled');
        $("#btnSave").removeClass("btn btn -default btn - sm btnOpacity pull - right").addClass("btn btn -default btn - sm btnDisOpacity pull - right");
    }
    if (isCancel) {
        $('#btnCancel').removeAttr('disabled');
        $("#btnCancel").removeClass("btn btn -default btn - sm btnDisOpacity pull - right").addClass("btn btn -default btn - sm btnOpacity pull - right");
    }
    else {
        $("#btnCancel").prop('disabled', 'disabled');
        $("#btnCancel").removeClass("btn btn -default btn - sm btnOpacity pull - right").addClass("btn btn -default btn - sm btnDisOpacity pull - right");
    }
    if (isEdit) {
        $('#btnEdit').removeAttr('disabled');
        $("#btnEdit").removeClass("btn btn -default btn - sm btnDisOpacity pull - right").addClass("btn btn -default btn - sm btnOpacity pull - right");
    }
    else {
        $("#btnEdit").prop('disabled', 'disabled');
        $("#btnEdit").removeClass("btn btn -default btn - sm btnOpacity pull - right").addClass("btn btn -default btn - sm btnDisOpacity pull - right");
    }
}
function Enables(status) {
    if (status == true) {
        //$('#EMPNAME').removeAttr('disabled');
        //$('#GENDER').removeAttr('disabled');
        //$('#BIRTHDATE').removeAttr('disabled');
        //$('#NATIONALITY').removeAttr('disabled');
        //$('#IDENTITYCARD').removeAttr('disabled');
        //$('#DATEJOIN').removeAttr('disabled');
        //$('#ACADEMIC').removeAttr('disabled');
        //$('#POSITION').removeAttr('disabled');
        //$('#SKILL').removeAttr('disabled');
        //$('#MAJORREGISTER').removeAttr('disabled');
        //$('#MAJORSELECTION').removeAttr('disabled');
    }
    else {
        //$('#EMPNAME').prop("disabled", "disabled");
        //$('#GENDER').prop('disabled', 'disabled');
        //$('#BIRTHDATE').prop('disabled', 'disabled');
        //$('#NATIONALITY').prop('disabled', 'disabled');
        //$('#IDENTITYCARD').prop('disabled', 'disabled');
        //$('#DATEJOIN').prop('disabled', 'disabled');
        //$('#ACADEMIC').prop('disabled', 'disabled');
        //$('#POSITION').prop('disabled', 'disabled');
        //$('#SKILL').prop('disabled', 'disabled');
        //$('#MAJORREGISTER').prop('disabled', 'disabled');
        //$('#MAJORSELECTION').prop('disabled', 'disabled');
    }
}
function isDate(value) {
    //Here comes one ugly, long and working regexp
    var pattern = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-]\d{4}$/;
    return pattern.test(value);
}
function loadData()
{
     if ($("#empIdSearch").val().length == 0) return false;
        var empIdSearch = $("#empIdSearch").val().trim();
        //Waiting process.
        kendo.ui.progress($("#window"), true);
        var url = '@Url.Action("QueryEmployeeByEmpId", "Staff")';
        $.post(url, { empId: empIdSearch }, function (data) {
        });
        $('#StaffPartial').load('/Staff/Edit', { empId: empIdSearch });
        //Get DeptCode and FuncCode.
        $.ajax
            ({
                url: "/Staff/getDeptCodeAndFuncCode",
                type: 'POST',
                data: { empId: empIdSearch },
                OnComplete: function () {
                    Enables(false);
                },
                success: function (respond) {
                    var GEOGRAPHICALORG = respond.result.Data.GEOGRAPHICALORG;
                    var GEODIRECTREPORT = respond.result.Data.GEODIRECTREPORT;
                    var FUNCTIONALORG = respond.result.Data.FUNCTIONALORG;
                    var FUNCDIRECTREPORT = respond.result.Data.FUNCDIRECTREPORT;
                    var GEOUSERNAME = respond.result.Data.DISPLAYGEODIRECTREPORT;
                    var GEOEMPID = respond.result.Data.GEOUSER;
                    var FUNEMPID = respond.result.Data.FUNCUSER;
                    var FUNCTUSERNAME = respond.result.Data.DISPLAYFUNCDIRECTREPORT;
                    try {
                        //Process related data.
                        //Process for Geo Organization.
                        if (GEOGRAPHICALORG != '' && GEOGRAPHICALORG != null) {
                            treeGeoDirectReport.dataSource.read({ deptcode: GEOGRAPHICALORG });
                        }
                        else
                        {
                            treeGeoDirectReport.dataSource.read({ deptcode: null });
                        }
                        //End for Geo Organization.
                        //Process for Funct Report.
                        if (FUNCTIONALORG != '' && GEOGRAPHICALORG != null) {
                            treeFunctionDirectReport.dataSource.read({ funccode: FUNCTIONALORG });
                        }
                        else
                        {
                            treeFunctionDirectReport.dataSource.read({ funccode: null });
                        }
                        
                    }
                    finally {                       
                        kendo.ui.progress($("#window"), false);                        
                        $("#GEODIRECTREPORT").val(GEODIRECTREPORT);
                        $("#FUNCDIRECTREPORT").val(FUNCDIRECTREPORT);
                        $("#GEOEMPIDREPORT").val(GEOEMPID);
                        $("#FUNEMPIDREPORT").val(FUNEMPID);
                        //$("#imageShort").attr("src", $("#IMAGE").val());
                        
                        Enables(false);
                    }
                },
                error: function (error) {
                    $("#EMPID").val("");
                    kendo.ui.progress($("#window"), false);
                    showMessage("This EMPID = " + $("#empIdSearch").val() + " is not found!", "alert alert-info");
                    Enables(false);
                }
            });
            $("#imageShort").attr("src", $("#IMAGE").val());
            console.log($("#imageShort").attr("src"));
    }
    function showMessage(message, style) {
        var ostyle = $("#messageInfor").attr("class");
        $("#messageInfor").removeClass(ostyle).addClass(style);
        $("#messageInfor").html(message);
        $("#messageInfor").slideToggle("slow");
        $("#messageInfor").slideToggle("slow");
    }

$(document).ready(function ()
{
    //#region "DECLARATION VARIABLE"
    treeemployeeOfOrg = $("#treeemployeeOfOrg").data("kendoDropDownTree");
    treeGeoDirectReport = $("#treeGeoDirectReport").data("kendoTreeView");
    treeFunctionDirectReport = $("#treeFunctionDirectReport").data("kendoTreeView");
    gridFunctReportEmployees = $("#gridFunctReportEmployees").data("kendoGrid");
    treeGeoReport = $("#DeptGeo").data("kendoDropDownTree");
    treeFunctionReport = $("#treeFunctReport").data("kendoDropDownTree");
    tabStrip = $("#tabstrip").kendoTabStrip().data("kendoTabStrip");
    gridForm = $("#gridForm").data("kendoGrid");
    gridGeoForm = $("#gridGeoForm").data("kendoGrid");
    gridFunctionForm = $("#gridFunctionForm").data("kendoGrid");
    //#endregion "DECLARATION VARIABLE"
   
    kendo.ui.progress($("#window"), false);
    Visable(true, false, false, false, false);

    $("#newEmployee").on("click", function (){
        clearForAddNew("");
        $.post('@Url.Action("Index", "Staff")', function () { });
        Visable(false, false, true, true, false);
        isSaveStatus = 1;
        Enables(true);
    });
    //#region "FUNCTIONS"
    $("#findEmployee").on("click", function (filter) {
        loadData();
        Visable(true, true, false, false, true);
        Enables(false);
    });
    $("#btnEdit").on("click", function (event) {
        event.preventDefault();
        Visable(false, false, true, true, false);
        $("#showDeptCode").removeAttr("disabled");
        $("#btnShowGeoOrganizationReport").removeAttr("disabled");
        $("#btnShowFunctionDirectReport").removeAttr("disabled");
        $("#FUNEMPIDREPORT").removeAttr("disabled");
        $("#GEOEMPIDREPORT").removeAttr("disabled");
        isSaveStatus = 0;
        Enables(true);
    });
    $("#btnSave").on("click", function (event) {        
        event.preventDefault();
        $("#IMAGE").val($("#imageShort").attr("src"));
        var isvalidate = true;
        if ($("#EMPNAME").val().length == 0) {
            $("span[data-valmsg-for=EMPNAME]").text("Please enter employee name.");
            isvalidate = false;
        }
        else
            $("span[data-valmsg-for=EMPNAME]").text("");
        if ($("#DEPTCODE").val().length == 0) {
            isvalidate = false;
            $("span[data-valmsg-for=DEPTCODE]").text("Please choose department.");
        }
        else
            $("span[data-valmsg-for=DEPTCODE]").text("");

        if ($("#DATEJOIN").val().length == 0) {
            isvalidate = false;
            $("span[data-valmsg-for=DATEJOIN]").text("Please choose join date.");
        }
        else
            $("span[data-valmsg-for=DATEJOIN]").text("");
        if (isvalidate == true) {
            var disabled = $('form#frmEmployee').find(':input:disabled').removeAttr('disabled');
             $.ajax({
                url: '@Url.Action("SaveEmployee", "Staff")',
                type: 'post',
                data: $('form#frmEmployee').serialize(),
                 success: function (result) { 
                     try {
                         disabled.attr('disabled', 'disabled');
                         $("#btnEdit").removeAttr('disabled');
                         $("#showDeptCode").attr("disabled", "disabled");
                         $("#btnShowGeoOrganizationReport").attr("disabled", "disabled");
                         $("#btnShowFunctionDirectReport").attr("disabled", "disabled");
                         $("#FUNEMPIDREPORT").attr("disabled", "disabled");
                         $("#GEOEMPIDREPORT").attr("disabled", "disabled");
                     } finally {
                         Enables(false);
                         $("#showDeptCode").attr("disabled", "disabled");
                         $("#btnShowGeoOrganizationReport").attr("disabled", "disabled");
                         $("#btnShowFunctionDirectReport").attr("disabled", "disabled");
                         $("#FUNEMPIDREPORT").attr("disabled", "disabled");
                         $("#GEOEMPIDREPORT").attr("disabled", "disabled");
                     }
                     
                }
            });
            loadData();
            Visable(true, true, false, false, true);
            Enables(false);
            showMessage("You create successful!", "alert alert-success");           
        }
    });
    $("#btnDeleteEmployee").on("click", function (event) {
        event.preventDefault();
        Visable(true, false, false, false, false);
        Enables(false);
    });
    $("#btnCancel").on("click", function (event) {
        event.preventDefault();
        if (isSaveStatus == 1) {
            $("span[data-valmsg-for=EMPNAME]").text("");
            $("span[data-valmsg-for=DEPTCODE]").text("");
            $("span[data-valmsg-for=DATEJOIN]").text("");
            Visable(true, false, false, false, false);
        }
        else {
            //$('#StaffPartial').load('/Staff/Edit', { empId: $("#EMPID").val() });
            Visable(true, true, false, false, true);
        }
        Enables(false);
        $("#showDeptCode").attr("disabled", "disabled");
        $("#btnShowGeoOrganizationReport").attr("disabled", "disabled");
        $("#btnShowFunctionDirectReport").attr("disabled", "disabled");
        $("#FUNEMPIDREPORT").attr("disabled", "disabled");
        $("#GEOEMPIDREPORT").attr("disabled", "disabled");
    });
    $("#btnSignEmployeeToOrg").on("click", function (event) {
        event.preventDefault();
    });
    $("#btnSearchByEmpID").on("click", function (event) {
        event.preventDefault();
        if ($("#txtEmployeeID").val() == '') return;
        gridFunctReportEmployees.dataSource.read({ empId: $("#txtEmployeeID").val(), functCode: functReportCode });
    });
    //#endregion "FUNCTIONS"
});
</script>
